//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34011
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MobileWebApi.Misc.Service.WcfTaskService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskInfo", Namespace="http://schemas.datacontract.org/2004/07/NewbieTask.Model")]
    [System.SerializableAttribute()]
    public partial class TaskInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CreatorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CustomerActField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CustomerActTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeleteTagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FinishTimesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JumpPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RowNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskDesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TaskRankField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskRewardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TaskTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int isoverField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CreatorID {
            get {
                return this.CreatorIDField;
            }
            set {
                if ((this.CreatorIDField.Equals(value) != true)) {
                    this.CreatorIDField = value;
                    this.RaisePropertyChanged("CreatorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CustomerAct {
            get {
                return this.CustomerActField;
            }
            set {
                if ((this.CustomerActField.Equals(value) != true)) {
                    this.CustomerActField = value;
                    this.RaisePropertyChanged("CustomerAct");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CustomerActType {
            get {
                return this.CustomerActTypeField;
            }
            set {
                if ((this.CustomerActTypeField.Equals(value) != true)) {
                    this.CustomerActTypeField = value;
                    this.RaisePropertyChanged("CustomerActType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DeleteTag {
            get {
                return this.DeleteTagField;
            }
            set {
                if ((this.DeleteTagField.Equals(value) != true)) {
                    this.DeleteTagField = value;
                    this.RaisePropertyChanged("DeleteTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FinishTimes {
            get {
                return this.FinishTimesField;
            }
            set {
                if ((this.FinishTimesField.Equals(value) != true)) {
                    this.FinishTimesField = value;
                    this.RaisePropertyChanged("FinishTimes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JumpPath {
            get {
                return this.JumpPathField;
            }
            set {
                if ((object.ReferenceEquals(this.JumpPathField, value) != true)) {
                    this.JumpPathField = value;
                    this.RaisePropertyChanged("JumpPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RowNumber {
            get {
                return this.RowNumberField;
            }
            set {
                if ((this.RowNumberField.Equals(value) != true)) {
                    this.RowNumberField = value;
                    this.RaisePropertyChanged("RowNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sort {
            get {
                return this.SortField;
            }
            set {
                if ((this.SortField.Equals(value) != true)) {
                    this.SortField = value;
                    this.RaisePropertyChanged("Sort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskDes {
            get {
                return this.TaskDesField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskDesField, value) != true)) {
                    this.TaskDesField = value;
                    this.RaisePropertyChanged("TaskDes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskName {
            get {
                return this.TaskNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNameField, value) != true)) {
                    this.TaskNameField = value;
                    this.RaisePropertyChanged("TaskName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte TaskRank {
            get {
                return this.TaskRankField;
            }
            set {
                if ((this.TaskRankField.Equals(value) != true)) {
                    this.TaskRankField = value;
                    this.RaisePropertyChanged("TaskRank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskReward {
            get {
                return this.TaskRewardField;
            }
            set {
                if ((this.TaskRewardField.Equals(value) != true)) {
                    this.TaskRewardField = value;
                    this.RaisePropertyChanged("TaskReward");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte TaskType {
            get {
                return this.TaskTypeField;
            }
            set {
                if ((this.TaskTypeField.Equals(value) != true)) {
                    this.TaskTypeField = value;
                    this.RaisePropertyChanged("TaskType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int isover {
            get {
                return this.isoverField;
            }
            set {
                if ((this.isoverField.Equals(value) != true)) {
                    this.isoverField = value;
                    this.RaisePropertyChanged("isover");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfTaskService.INewbieTask")]
    public interface INewbieTask {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewbieTask/GetAllTaskList", ReplyAction="http://tempuri.org/INewbieTask/GetAllTaskListResponse")]
        MobileWebApi.Misc.Service.WcfTaskService.TaskInfo[] GetAllTaskList(int TaskType, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewbieTask/GetAllTaskList", ReplyAction="http://tempuri.org/INewbieTask/GetAllTaskListResponse")]
        System.Threading.Tasks.Task<MobileWebApi.Misc.Service.WcfTaskService.TaskInfo[]> GetAllTaskListAsync(int TaskType, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewbieTask/AddTaskComplete", ReplyAction="http://tempuri.org/INewbieTask/AddTaskCompleteResponse")]
        int AddTaskComplete(int UserID, int TaskID, int Platform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewbieTask/AddTaskComplete", ReplyAction="http://tempuri.org/INewbieTask/AddTaskCompleteResponse")]
        System.Threading.Tasks.Task<int> AddTaskCompleteAsync(int UserID, int TaskID, int Platform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewbieTask/TaskComplete", ReplyAction="http://tempuri.org/INewbieTask/TaskCompleteResponse")]
        int TaskComplete(int UserID, int TaskID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewbieTask/TaskComplete", ReplyAction="http://tempuri.org/INewbieTask/TaskCompleteResponse")]
        System.Threading.Tasks.Task<int> TaskCompleteAsync(int UserID, int TaskID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewbieTask/GetUserInfo", ReplyAction="http://tempuri.org/INewbieTask/GetUserInfoResponse")]
        string GetUserInfo(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewbieTask/GetUserInfo", ReplyAction="http://tempuri.org/INewbieTask/GetUserInfoResponse")]
        System.Threading.Tasks.Task<string> GetUserInfoAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewbieTask/GetUserInfoByTaskType", ReplyAction="http://tempuri.org/INewbieTask/GetUserInfoByTaskTypeResponse")]
        string GetUserInfoByTaskType(int UserID, int TaskType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewbieTask/GetUserInfoByTaskType", ReplyAction="http://tempuri.org/INewbieTask/GetUserInfoByTaskTypeResponse")]
        System.Threading.Tasks.Task<string> GetUserInfoByTaskTypeAsync(int UserID, int TaskType);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INewbieTaskChannel : MobileWebApi.Misc.Service.WcfTaskService.INewbieTask, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NewbieTaskClient : System.ServiceModel.ClientBase<MobileWebApi.Misc.Service.WcfTaskService.INewbieTask>, MobileWebApi.Misc.Service.WcfTaskService.INewbieTask {
        
        public NewbieTaskClient() {
        }
        
        public NewbieTaskClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NewbieTaskClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NewbieTaskClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NewbieTaskClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MobileWebApi.Misc.Service.WcfTaskService.TaskInfo[] GetAllTaskList(int TaskType, int UserId) {
            return base.Channel.GetAllTaskList(TaskType, UserId);
        }
        
        public System.Threading.Tasks.Task<MobileWebApi.Misc.Service.WcfTaskService.TaskInfo[]> GetAllTaskListAsync(int TaskType, int UserId) {
            return base.Channel.GetAllTaskListAsync(TaskType, UserId);
        }
        
        public int AddTaskComplete(int UserID, int TaskID, int Platform) {
            return base.Channel.AddTaskComplete(UserID, TaskID, Platform);
        }
        
        public System.Threading.Tasks.Task<int> AddTaskCompleteAsync(int UserID, int TaskID, int Platform) {
            return base.Channel.AddTaskCompleteAsync(UserID, TaskID, Platform);
        }
        
        public int TaskComplete(int UserID, int TaskID) {
            return base.Channel.TaskComplete(UserID, TaskID);
        }
        
        public System.Threading.Tasks.Task<int> TaskCompleteAsync(int UserID, int TaskID) {
            return base.Channel.TaskCompleteAsync(UserID, TaskID);
        }
        
        public string GetUserInfo(int UserID) {
            return base.Channel.GetUserInfo(UserID);
        }
        
        public System.Threading.Tasks.Task<string> GetUserInfoAsync(int UserID) {
            return base.Channel.GetUserInfoAsync(UserID);
        }
        
        public string GetUserInfoByTaskType(int UserID, int TaskType) {
            return base.Channel.GetUserInfoByTaskType(UserID, TaskType);
        }
        
        public System.Threading.Tasks.Task<string> GetUserInfoByTaskTypeAsync(int UserID, int TaskType) {
            return base.Channel.GetUserInfoByTaskTypeAsync(UserID, TaskType);
        }
    }
}
