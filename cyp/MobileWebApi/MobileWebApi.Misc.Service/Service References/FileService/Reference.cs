//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.0
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MobileWebApi.Misc.Service.FileService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileService.IFileService")]
    public interface IFileService {
        
        // CODEGEN: 消息 FileUploadMessage 的包装名称(FileUploadMessage)以后生成的消息协定与默认值(UploadFile)不匹配
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="UploadFile")]
        void UploadFile(global::MobileWebApi.Misc.Service.FileService.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="UploadFile")]
        System.Threading.Tasks.Task UploadFileAsync(global::MobileWebApi.Misc.Service.FileService.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/FileExists", ReplyAction="http://tempuri.org/IFileService/FileExistsResponse")]
        int FileExists(string FilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/FileExists", ReplyAction="http://tempuri.org/IFileService/FileExistsResponse")]
        System.Threading.Tasks.Task<int> FileExistsAsync(string FilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/DeleteFile", ReplyAction="http://tempuri.org/IFileService/DeleteFileResponse")]
        int DeleteFile(string FilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/DeleteFile", ReplyAction="http://tempuri.org/IFileService/DeleteFileResponse")]
        System.Threading.Tasks.Task<int> DeleteFileAsync(string FilePath);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileUploadMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string SavePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileData;
        
        public FileUploadMessage() {
        }
        
        public FileUploadMessage(string FileName, string SavePath, System.IO.Stream FileData) {
            this.FileName = FileName;
            this.SavePath = SavePath;
            this.FileData = FileData;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileServiceChannel : global::MobileWebApi.Misc.Service.FileService.IFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileServiceClient : System.ServiceModel.ClientBase<global::MobileWebApi.Misc.Service.FileService.IFileService>, global::MobileWebApi.Misc.Service.FileService.IFileService {
        
        public FileServiceClient() {
        }
        
        public FileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void global::MobileWebApi.Misc.Service.FileService.IFileService.UploadFile(global::MobileWebApi.Misc.Service.FileService.FileUploadMessage request) {
            base.Channel.UploadFile(request);
        }
        
        public void UploadFile(string FileName, string SavePath, System.IO.Stream FileData) {
            global::MobileWebApi.Misc.Service.FileService.FileUploadMessage inValue = new global::MobileWebApi.Misc.Service.FileService.FileUploadMessage();
            inValue.FileName = FileName;
            inValue.SavePath = SavePath;
            inValue.FileData = FileData;
            ((global::MobileWebApi.Misc.Service.FileService.IFileService)(this)).UploadFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task global::MobileWebApi.Misc.Service.FileService.IFileService.UploadFileAsync(global::MobileWebApi.Misc.Service.FileService.FileUploadMessage request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task UploadFileAsync(string FileName, string SavePath, System.IO.Stream FileData) {
            global::MobileWebApi.Misc.Service.FileService.FileUploadMessage inValue = new global::MobileWebApi.Misc.Service.FileService.FileUploadMessage();
            inValue.FileName = FileName;
            inValue.SavePath = SavePath;
            inValue.FileData = FileData;
            return ((global::MobileWebApi.Misc.Service.FileService.IFileService)(this)).UploadFileAsync(inValue);
        }
        
        public int FileExists(string FilePath) {
            return base.Channel.FileExists(FilePath);
        }
        
        public System.Threading.Tasks.Task<int> FileExistsAsync(string FilePath) {
            return base.Channel.FileExistsAsync(FilePath);
        }
        
        public int DeleteFile(string FilePath) {
            return base.Channel.DeleteFile(FilePath);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFileAsync(string FilePath) {
            return base.Channel.DeleteFileAsync(FilePath);
        }
    }
}
